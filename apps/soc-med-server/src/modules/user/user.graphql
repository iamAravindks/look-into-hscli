type User @key(fields: "_id") {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  name: String
  bio: String
  status: String
  imageUrl: String
  followers: [ID]
  following: [ID]
  posts(
    search: String
    filter: JSON
    sort: JSON
    limit: Int
    offset: Int
  ): [Post]
  passwordResetToken: String
  passwordTokenExpires: DateTime
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  bio: String
  imageUrl: String
}

input UpdateUserInput {
  email: String
  name: String
  password: String
  bio: String
  status: String
  imageUrl: String
}

extend type Query {
  getUserById(_id: ID!): User @cacheSet(type: "getUserById", identifier: "_id")

  getAllUser(
    search: String
    filter: JSON
    sort: JSON
    limit: Int
    offset: Int
  ): [User]! @isMHAdmin @cacheSet(type: "getAllUsers", identifier: "_id")

  getOneUser(filter: JSON, sort: JSON): User
    @cacheSet(type: "getUser", identifier: "_id")

  getProfile(filter: JSON, sort: JSON): User
    @auth
    @cacheSet(type: "profile", identifier: "_id")

  getAllUserCount(search: String, filter: JSON): Int! @isMHAdmin
}

extend type Mutation {
  createUser(data: CreateUserInput!): User!
    @cachePurge(payloads: [{ types: ["getUser", "getAllUsers", "profile"] }])
  updateUser(data: UpdateUserInput!): User!
    @auth
    @cachePurge(
      payloads: [
        {
          types: ["getUser", "getAllUsers", "getUserById", "profile"]
          identifier: "_id"
        }
      ]
    )
  deleteUser(_id: ID!): User!
    @auth
    @cachePurge(
      payloads: [
        {
          types: ["getUser", "getAllUsers", "getUserById", "profile"]
          identifier: "_id"
        }
      ]
    )
}
